services:
  airflow-init:
    command:
    - version
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_PASSWORD: airflow
      _AIRFLOW_WWW_USER_USERNAME: airflow
      AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ""
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      PGEOCODE_DATA_DIR: /tmp/pgeocode_data
      TEST_ENV_VAR: test_something
    image: chrishum17/custom_airflow_image
    networks:
      default: null
    user: "1000:0"
    volumes:
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/dags
      target: /opt/airflow/dags
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/logs
      target: /opt/airflow/logs
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/plugins
      target: /opt/airflow/plugins
  airflow-scheduler:
    command:
    - scheduler
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ""
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      PGEOCODE_DATA_DIR: /tmp/pgeocode_data
      TEST_ENV_VAR: test_something
    healthcheck:
      test:
      - CMD-SHELL
      - airflow jobs check --job-type SchedulerJob --hostname "${HOSTNAME}"
      timeout: 10s
      interval: 10s
      retries: 5
    image: chrishum17/custom_airflow_image
    networks:
      default: null
    restart: always
    user: "1000:0"
    volumes:
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/dags
      target: /opt/airflow/dags
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/logs
      target: /opt/airflow/logs
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/plugins
      target: /opt/airflow/plugins
  airflow-webserver:
    command:
    - webserver
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ""
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      PGEOCODE_DATA_DIR: /tmp/pgeocode_data
      TEST_ENV_VAR: test_something
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:8080/health
      timeout: 10s
      interval: 10s
      retries: 5
    image: chrishum17/custom_airflow_image
    networks:
      default: null
    ports:
    - mode: ingress
      target: 8080
      published: 8080
      protocol: tcp
    restart: always
    user: "1000:0"
    volumes:
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/dags
      target: /opt/airflow/dags
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/logs
      target: /opt/airflow/logs
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/plugins
      target: /opt/airflow/plugins
  airflow-worker:
    command:
    - celery
    - worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ""
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      PGEOCODE_DATA_DIR: /tmp/pgeocode_data
      TEST_ENV_VAR: test_something
    healthcheck:
      test:
      - CMD-SHELL
      - celery --app airflow.executors.celery_executor.app inspect ping -d "celery@${HOSTNAME}"
      timeout: 10s
      interval: 10s
      retries: 5
    image: chrishum17/custom_airflow_image
    networks:
      default: null
    restart: always
    user: "1000:0"
    volumes:
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/dags
      target: /opt/airflow/dags
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/logs
      target: /opt/airflow/logs
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/plugins
      target: /opt/airflow/plugins
  flower:
    command:
    - celery
    - flower
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ""
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      PGEOCODE_DATA_DIR: /tmp/pgeocode_data
      TEST_ENV_VAR: test_something
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:5555/
      timeout: 10s
      interval: 10s
      retries: 5
    image: chrishum17/custom_airflow_image
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5555
      published: 5555
      protocol: tcp
    restart: always
    user: "1000:0"
    volumes:
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/dags
      target: /opt/airflow/dags
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/logs
      target: /opt/airflow/logs
    - type: bind
      source: /home/chris/Developer/bike_theft_backend/plugins
      target: /opt/airflow/plugins
  postgres:
    environment:
      POSTGRES_DB: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_USER: airflow
    healthcheck:
      test:
      - CMD
      - pg_isready
      - -U
      - airflow
      interval: 5s
      retries: 5
    image: postgres:13
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5432
      published: 5432
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: postgres-db-volume
      target: /var/lib/postgresql/data
  redis:
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      timeout: 30s
      interval: 5s
      retries: 50
    image: redis:latest
    networks:
      default: null
    ports:
    - mode: ingress
      target: 6379
      published: 6379
      protocol: tcp
    restart: always
networks:
  default:
    name: bike_theft_backend_default
volumes:
  postgres-db-volume:
    name: bike_theft_backend_postgres-db-volume
x-airflow-common:
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
  environment:
    AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__LOAD_EXAMPLES: "true"
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    PGEOCODE_DATA_DIR: /tmp/pgeocode_data
    TEST_ENV_VAR: test_something
  image: chrishum17/custom_airflow_image
  user: "1000:0"
  volumes:
  - ./dags:/opt/airflow/dags
  - ./logs:/opt/airflow/logs
  - ./plugins:/opt/airflow/plugins
